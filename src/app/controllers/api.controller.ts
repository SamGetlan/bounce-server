import {
  Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent,
  HttpResponseNotFound, HttpResponseOK, Post, ValidateBody, ValidatePathParam
} from '@foal/core';

import { ValidationTypes } from '../hooks';

import { HighScore } from '../models';

export class ApiController {

  @Get('/highscores')
  async getHighScores() {
    const highScores = await HighScore.find();
    return new HttpResponseOK(highScores);
  }

  @Post('/highscores')
  @ValidateBody({
    // The body request should be an object once parsed by the framework.
    // Every additional properties that are not defined in the "properties"
    // object should be removed.
    additionalProperties: false,
    properties: {
      // The "score" property of ctx.request.body should be a number if it exists.
      score: ValidationTypes.integer,
      // The "time" property of ctx.request.body should be a string if it exists.
      time: ValidationTypes.integer,
      // the "name" property of ctx.request.body should be a string if it exists.
      name: ValidationTypes.string,
      // the "powerUps" property of ctx.request.body should be a 
      powerUps: {
        type: 'array',
        items: ValidationTypes.powerUp,
      },
    },
    // All properties are required
    required: [ 'score', 'time', 'name', 'powerUps'],
    type: 'object'
  })
  async postHighScore(ctx: Context) {
    // Create a new highscore with the body of the HTTP request.
    const highScore = Object.assign(new HighScore(), ctx.request.body);

    // Save the highscore in the database.
    await highScore.save();

    // Return the new highscore with the id generated by the database. The status is 201.
    return new HttpResponseCreated(highScore);

  }

  @Delete('/highscores/:id')
  // The id should be a string. If it is not, the hook returns a "400 - Bad Request" error.
  @ValidatePathParam('id', ValidationTypes.string)
  async deleteHighScore(ctx: Context) {
    // Get the todo with the id given in the URL if it exists.
    const highScore = await HighScore.findById(ctx.request.params.id);

    // Return a 404 Not Found response if no such highScore exists.
    if (!highScore) {
      return new HttpResponseNotFound();
    }

    // Remove the highscore from the database.
    await HighScore.findByIdAndRemove(ctx.request.params.id);

    // Returns a successful empty response. The stat is 204.
    return new HttpResponseNoContent();
  }
}
